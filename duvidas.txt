Boa noite professor, primeiramente gostaria de parabenizar pelo curso, estou gostando muito e está abrindo minha mente.
O que ainda não consegui compreender com profundidade são alguns termos que não sei se são considerados como atributos, ex:
Em alguns lugares chamamos uma função ou atributo passando <>:
private IRepository<UserEntity> _repository;
Em outros, não passamos nada:
serviceCollection.AddScoped(typeof(IRepository<>) , typeof(BaseRepository<>));
Em outros lugares passamos dois parâmetros:
serviceColletion.AddTransient<IUserService, IUserService>();

A primeira dúvida:

Como identificar se tenho que utilizar um classe, entidade ou objeto dentro do <?> ?

Outra dúvida: Como sei quando devo utilizar a palavra Where na declaração da classe, ex:

public class BaseRepository<T> : IRepository<T> where T : BaseEntity

Não encontrei no fórum nenhuma dúvida semelhante, poderia me indicar algum curso para consolidar esses fundamentos ou algum tópico semelhante?

resposta -=-=-



private IRepository<UserEntity> _repository;

Veja que dentro de IRepository<T> tem o <T> que vai receber qualquer coisa que seja do Tipo BaseEntity, então aqui você tem uma restrição você pode colocar qualquer coisa que tenha heranca de BaseEntity.



Aqui é AddScoped para registrar Injeção de Dependência para Repository, aqui você está passando um typeof, então não passa nada porque você está informando que o tipo de uma Interface serve para a implementação dos código na BaseRepository.

serviceCollection.AddScoped(typeof(IRepository<>) , typeof(BaseRepository<>));



Aqui é a injeção de dependência mas eu estou informando uma Interface IUserService que na implementação dela não recebe nada generico.

serviceColletion.AddTransient<IUserService, IUserService>();

veja que é tipo assim

public interface IUserService



A primeira dúvida:

Sempre que Interface, classe tenha algo Genérico <T>



Outra dúvida: Como sei quando devo utilizar a palavra Where na declaração

public class BaseRepository<T> : IRepository<T> where T : BaseEntity

Somente quando eu estou trabalhando com generics e que tenha alguma restrição neste caso eu quero que todas as entidades

tenha uma herança de BaseEntity.